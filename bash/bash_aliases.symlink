#!/bin/bash

# ALIASES
# ==================================================================

# Command aliases
# Use `hub` as our git wrapper:
#   http://defunkt.github.com/hub/
if [ $(command -v hub) ]
then
  alias git=$(command -v hub)
fi
alias lsm="ls -lhFGHot"
alias rmorig="find . -name \"*.orig\" -type f -delete"

# Useful directories
alias cdhf="cd ~/dev/hellofax"
alias cdweb="cd ~/dev/hellosign-web"
alias cdhw="cd ~/dev/smartforms"

# SSH aliases
alias hipchat-bot="ssh -i \"/Users/cpaul/.ssh/hipchat-bot.pem\" ubuntu@ec2-52-8-180-122.us-west-1.compute.amazonaws.com"

# Jellosign aliases
alias jello="cd ~/dev/jellosign; mvn clean jetty:run -Dorg.slf4j.simpleLogger.defaultLogLevel=debug"
alias jellostaging="cd ~/dev/jellosign; mvn clean jetty:run -Dorg.slf4j.simpleLogger.defaultLogLevel=debug -Dhellosign.base.url=https://api.staging-hellosign.com/v3 -Dhellosign.oauth.base.url=https://www.staging-hellosign.com/oauth/token -Dhellosign.oauth.authorize.url=https://www.staging-hellosign.com/oauth/authorize -Dhellosign.disable.ssl=true"
alias jelloqa="cd ~/dev/jellosign; mvn clean jetty:run -Dorg.slf4j.simpleLogger.defaultLogLevel=debug -Dhellosign.base.url=https://api.qa-hellosign.com/v3 -Dhellosign.oauth.base.url=https://www.qa-hellosign.com/oauth/token -Dhellosign.oauth.authorize.url=https://www.qa-hellosign.com/oauth/authorize -Dhellosign.disable.ssl=true"
alias jellodev="cd ~/dev/jellosign; mvn clean jetty:run -Dorg.slf4j.simpleLogger.defaultLogLevel=debug -Dhellosign.base.url=https://api.dev-hellosign.com/v3 -Dhellosign.oauth.base.url=https://www.dev-hellosign.com/oauth/token -Dhellosign.oauth.authorize.url=https://www.dev-hellosign.com/oauth/authorize -Dhellosign.disable.ssl=true"
alias jellogrok="ngrok http -subdomain=jellosign 8080"

# Postgres aliases
alias postgres.status="pg_ctl status -D /usr/local/var/postgres"
alias postgres.stop="pg_ctl -D /usr/local/var/postgres stop -s -m fast"
alias postgres.start="pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start"

# Pipe my public key to my clipboard.
alias pubkey="more ~/.ssh/id_rsa.pub | pbcopy | echo '=> Public key copied to pasteboard.'"

# Show/hide hidden files in Mac OS
alias showall='defaults write com.apple.finder AppleShowAllFiles true; killall Finder /System/Library/CoreServices/Finder.app'
alias hideall='defaults write com.apple.finder AppleShowAllFiles false; killall Finder /System/Library/CoreServices/Finder.app'

# FUNCTIONS
# ==================================================================

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
# credit: http://nparikh.org/notes/zshrc.txt
extract() {
    if [ -z $1 ]; then
      echo "Usage: extract <file>"
    else
      if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
      else
        echo "'$1' is not a valid file"
      fi
    fi
}

# Change directory creating it if it doesn't exists.
cdf() {
  if [ ! -d $1 ]; then
    mkdir -p $1;
  fi
  cd $1;
}

# Repeat a command N times
# From: http://www.stefanoforenza.com/how-to-repeat-a-shell-command-n-times/
repeat() {
    n=$1
    shift
    while [ $(( n -= 1 )) -ge 0 ]
    do
        "$@"
    done
}

# Duplicate a file adding the extention .bak_[timestamp]
backup() {
  if [ -z "${1}" ]
  then
    echo "Missing file to backup. Nothing to do."
    return 1
  fi
  BACKUP_FILENAME="${1}.bak_$(date +"%Y%m%d%H%M%S")";
  cp "${1}" "${BACKUP_FILENAME}" && echo "Backup created: ${BACKUP_FILENAME}";
}

# List files (containing $2 in the name) containing a string ($1) begining from the current dir
# "${@:3}" Stands for all parameters from the third (included) on. (From: http://wiki.bash-hackers.org/scripting/posparams#mass_usage)
hgrep() {
  if [ $# -gt 0 ]; then
    egrep "$1" -i -n -r . --colour --include "*$2*" "${@:3}"
  fi
}
